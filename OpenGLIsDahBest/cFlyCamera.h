#pragma once

#include <glm/glm.hpp>
#include <glm/vec3.hpp> // glm::vec3
#include <glm/vec4.hpp> // glm::vec4
#include <glm/gtc/constants.hpp>		// For PI


// The starter code I got from chatGPT is below...
// (also in the 'Fly camera for OpenGL that Michael got from chatGPT.txt' file)

class cFlyCamera
{
public:
	cFlyCamera();

    void setEye(glm::vec3 newEye);
    void setEye(float x, float y, float z);

    glm::vec3 getEye(void);

    // These are in world units
    void setMovementSpeed(float newSpeed);
    float getMovementSpeed(void);

    // These are in degrees... sort of
    // (i.e. they are being converted to radians when calculating)  
    void setTurnSensitivity(float newTurnSensitivity);
    float getTurnSensitivity(void);

    // This returns the "at" or "target" value for the "look at" projection.
    // Watch that you don't look DIRECTLY up or down, or the screen will go
    //  black since the matrix calculation generates a divide by zero error. :)
    glm::vec3 getAt(void);

    void MoveForwards(void);        void MoveForwards(float amount);
    void MoveBackwards(void);       void MoveBackwards(float amount);

    void StrafeRight(void);         void StrafeRight(float amount);
    void StrafeLeft(void);          void StrafeLeft(float amount);

    void MoveUp(void);
    void MoveDown(void);

    void RotateOrYawLeft(float angleChangeInDegrees);
    void RotateOrYawRight(float angleChangeInDegrees);
    void PitchUp(float angleChangeInDegrees);
    void PitchDown(float angleChangeInDegrees);

private:
    glm::vec3 m_Eye;
	//float cameraX = 0.0f;
	//float cameraY = 0.0f;
	//float cameraZ = 0.0f;
	float m_cameraYaw_in_degrees = 0.0f;
	float m_cameraPitch_in_degrees = 0.0f;

	// Camera movement speed
	float m_movementSpeed = 0.1f;
	float m_turnSensitivity = 0.1f;


};



/*
Fly camera generated by chatGPT (uses GLUT)

Can you make my some C++ code for a fly camera that can move around a 3d scene

Certainly! Here's an example of a C++ code for a fly camera that can move around a 3D scene using keyboard inputs:

#include <iostream>
#include <GL/glut.h>

// Camera position and rotation
float cameraX = 0.0f;
float cameraY = 0.0f;
float cameraZ = 0.0f;
float cameraYaw = 0.0f;
float cameraPitch = 0.0f;

// Camera movement speed
float movementSpeed = 0.1f;
float rotationSpeed = 0.1f;

// Function to handle keyboard inputs
void handleKeyboard(unsigned char key, int x, int y) {
    switch (key) {
        // Move forward
        case 'w':
            cameraX -= movementSpeed * sin(cameraYaw);
            cameraZ += movementSpeed * cos(cameraYaw);
            break;

        // Move backward
        case 's':
            cameraX += movementSpeed * sin(cameraYaw);
            cameraZ -= movementSpeed * cos(cameraYaw);
            break;

        // Strafe right
        case 'd':
            cameraX += movementSpeed * sin(cameraYaw + 3.14 / 2);
            cameraZ -= movementSpeed * cos(cameraYaw + 3.14 / 2);
            break;

        // Strafe left
        case 'a':
            cameraX -= movementSpeed * sin(cameraYaw + 3.14 / 2);
            cameraZ += movementSpeed * cos(cameraYaw + 3.14 / 2);
            break;

        // Move up
        case 'e':
            cameraY += movementSpeed;
            break;

        // Move down
        case 'q':
            cameraY -= movementSpeed;
            break;

        // Rotate left
        case 'j':
            cameraYaw -= rotationSpeed;
            break;

        // Rotate right
        case 'l':
            cameraYaw += rotationSpeed;
            break;

        // Rotate up
        case 'i':
            cameraPitch -= rotationSpeed;
            break;

        // Rotate down
        case 'k':
            cameraPitch += rotationSpeed;
            break;
    }

    glutPostRedisplay();
}

// Function to handle window resize
void handleResize(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (double)w / (double)h, 1.0, 200.0);
}

// Function to render the scene
void renderScene() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(
        cameraX, cameraY, cameraZ,
        cameraX + sin(cameraYaw), cameraY + sin(cameraPitch), cameraZ - cos(cameraYaw),
        0.0f, 1.0f, 0.0f
    );

    // Draw your 3D scene here

    glutSwapBuffers();
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Fly Camera");

    glutKeyboardFunc(handleKeyboard);
    glutReshapeFunc(handleResize);
    glutDisplayFunc(renderScene);

    glEnable(GL_DEPTH_TEST);

    glutMainLoop();

    return 0;
}



Note: This code uses the OpenGL Utility Toolkit (GLUT) library for window management and basic rendering. Make sure to have GLUT properly installed and linked with your project.

The code allows the camera to move forward, backward, strafe left, strafe right, move up, and move down using the 'w', 's', 'a', 'd', 'e', and 'q' keys respectively. It also enables rotation with the 'i', 'j', 'k', and 'l' keys for rotating the camera up, left, down, and right respectively. Feel free to modify the movement and rotation speed variables (movementSpeed and rotationSpeed) to suit your needs.

Remember to implement the drawing of your 3D scene in the renderScene() function to visualize the actual scene.
*/
